@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model MRJ.ViewModels.AddProductViewModel
<div id="fileupload">
    <div class="row fileupload-buttonbar">
        <div class="col-lg-7">
            <!-- The fileinput-button span is used to style the file input field as button -->
            <span class="btn btn-success fileinput-button">
                <i class="glyphicon glyphicon-plus"></i>
                <span>انتخاب تصاویر...</span>
                <input type="file" name="files" multiple>
            </span>
            <button type="submit" class="btn btn-primary start">
                <i class="glyphicon glyphicon-upload"></i>
                <span>شروع آپلود</span>
            </button>
            <button type="reset" class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>لغو آپلود</span>
            </button>
            <button type="button" class="btn btn-danger delete">
                <i class="glyphicon glyphicon-trash"></i>
                <span>حذف</span>
            </button>
            <input type="checkbox" class="toggle">
            <!-- The global file processing state -->
            <span class="fileupload-process"></span>
        </div>
        <!-- The global progress state -->
        <div class="col-lg-5 fileupload-progress fade">
            <!-- The global progress bar -->
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                <div class="progress-bar progress-bar-success" style="width: 0;"></div>
            </div>
            <!-- The extended global progress state -->
            <div class="progress-extended">&nbsp;</div>
        </div>
    </div>
    <!-- The table listing the files available for upload/download -->
    <table id="tblProductImages" role="presentation" class="table table-striped"><tbody class="files"></tbody></table>
</div>

@if (Model.Images != null && Model.Images.Any())
{
    <input id="productImagesData" type="hidden" value="@JsonConvert.SerializeObject(Model.Images, new JsonSerializerSettings()
{
    ContractResolver = new CamelCasePropertyNamesContractResolver(),
})" />
}

<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <p class="preview"></p>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i && !o.options.autoUpload) { %}
            <button class="btn btn-primary start" disabled>
                <i class="glyphicon glyphicon-upload"></i>
                <span>شروع کن</span>
            </button>
            {% } %}
            {% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>بیخیال شو</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>
<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td style="display:none !important;">
            @Html.Hidden("Images.Index", "{%= file.name %}")
            @Html.Hidden("Images[{%= file.name %}].Id", "{%= file.id %}")
            @Html.Hidden("Images[{%= file.name %}].Name", "{%= file.name %}")
            @Html.Hidden("Images[{%= file.name %}].Order", "{%= file.order %}")
            @Html.Hidden("Images[{%= file.name %}].ThumbnailUrl", "{%= file.thumbnailUrl %}")
            @Html.Hidden("Images[{%= file.name %}].Url", "{%= file.url %}")
            @Html.Hidden("Images[{%= file.name %}].Size", "{%= file.size %}")
            @Html.Hidden("Images[{%= file.name %}].DeleteUrl", "{%= file.deleteUrl %}")
            @Html.Hidden("Images[{%= file.name %}].ProductId", Model.Id)
        </td>
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.name%}</a>
                {% } else { %}
                <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
            <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {% if (file.deleteUrl) { %}
            <button class="btn btn-danger delete" data-type="Post" data-url="{%=file.deleteUrl%}" {% if (file.deleteWithCredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                <i class="glyphicon glyphicon-trash"></i>
                <span>حذف</span>
            </button>
            <input type="checkbox" name="delete" value="1" class="toggle">
            {% } else { %}
            <button class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>بیخیال</span>
            </button>
            {% } %}
        </td>
    </tr>
    {% } %}
</script>