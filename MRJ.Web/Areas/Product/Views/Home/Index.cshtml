@using MRJ.DomainClasses
@using MRJ.ViewModels
@using MRJ.DomainClasses
@using MRJ.Web.ViewModels
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using Utilities
@model MRJ.ViewModels.ProductPageViewModel
@{
    ViewBag.Title = Model.Name;
    var thubmnailImage = Model.Images.FirstOrDefault();
    var productImages = Model.Images.Skip(1).ToList();
}

@section styles{
    @Styles.Render("~/Content/product-page")
}

<div id="productPage" class="container page-wrapper" style="background-color: transparent;">
    <div class="row product-section" style="padding-top: 10px; ">
        <div class="col-md-7 col-md-push-5">
            <div class="well well-sm product-name">
                <h1 style="font-size: 26px;">@Model.Name</h1>
            </div>
            <div class="product-price">
                @switch (Model.ProductStatus)
                {
                    case ProductStatus.Available:
                        <span class="product-price-name">قـیمـت:</span>
                        <span class="product-price">@Html.DisplayFor(model => model.Price)</span>
                        <span class="product-price-currency">تومان</span>
                        break;
                    case ProductStatus.NotAvailable:
                        <label class="label label-danger" style="font-size: 26px;">نا‌موجود</label>
                        break;
                    case ProductStatus.ComingSoon:
                        <label class="label label-info" style="font-size: 26px;">به زودی</label>
                        break;
                }

            </div>
            <div style="direction: ltr;" class="text-right">
                <input class="rating" id="rate-@Model.Id" data-show-clear="false" data-show-caption="false" value="@Model.AverageRating" data-size="xs" style="display: none;">
            </div>
        </div>

        <div id="productImages" class="col-md-5 col-md-pull-7" style="padding-bottom: 15px;">
            <div class="product-images  product-images-gallery">
                <a href="@thubmnailImage.Url" class="product-thumbnail">
                    <img src="@thubmnailImage.Url" alt="@Model.Name">
                </a>
            </div>
            @if (productImages.Any())
            {
                <div class="row">
                    <div class="col-md-12">
                        <div>
                            <div id="productImagesCarousel" class="carousel slide product-images-gallery">
                                <!-- Carousel items -->
                                <div class="carousel-inner">
                                    @for (int i = 0; i < productImages.Count(); i += 4)
                                    {
                                        <div class="item @if (i < 4){ <text>active</text> }">
                                            <div class="row">
                                                @foreach (var product in productImages.Skip(i).Take(4))
                                                {
                                                    <div class="col-md-3 col-sm-3 col-xs-3">
                                                        <a href="@product.Url">
                                                            <img src="@product.ThumbnailUrl" alt="@Model.Name" />
                                                        </a>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <a class="right carousel-control" href="#productImagesCarousel" data-slide="next">‹</a>
                            <a class="left carousel-control" href="#productImagesCarousel" data-slide="prev">›</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row product-section">
        <div class="col-md-12" style="padding-left: 0; padding-right: 1px; ">
            <div class="product-tabs">
                <!-- Nav tabs -->
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab"> <i class="fa fa-list"></i> مشخصات </a></li>
                    <li role="presentation"><a id="chartTabLink" href="#chartTab" aria-controls="profile" role="tab" data-toggle="tab"> <i class="fa fa-line-chart"></i> تغییرات قیمت</a></li>
                </ul>

                <!-- Tab panes -->
                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane active" id="home">
                        @Html.Raw(Model.Description)
                    </div>
                    <div role="tabpanel" class="tab-pane" id="chartTab">
                        <div class="row">
                            <div id="chart" class="col-md-12" style="direction: ltr;"></div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    @if (((IList<ProductWidgetViewModel>)ViewData["SimilarProducts"]).Any())
    {
        <div class="row product-section">
            <div class="col-md-12" style="padding: 0;">
                <div>
                    @{Html.RenderPartial(MVC.Widgets.Views.SimilarProductsWidget, new ProductSliderWidgetViewModel
                        {
                            Title = "کالا‌های مشابه",
                            CarouselId = "similarProductCarousel",
                            Products = ViewData["SimilarProducts"] as IList<ProductWidgetViewModel>
                        }); }
                </div>
            </div>
        </div>
                        }
</div>


@section scripts{

    <script>
        var productName = "@Model.Name";
        var pricesVal = @JsonConvert.SerializeObject(Model.Prices.Select(price => price.Price), new JsonSerializerSettings()
                        {
                            ContractResolver = new CamelCasePropertyNamesContractResolver(),
                        });

        var dateVals = @Html.Raw(JsonConvert.SerializeObject(Model.Prices.Select(price => price.DateTime.ToPersianDate()).ToList(), new JsonSerializerSettings()
                       {
                           ContractResolver = new CamelCasePropertyNamesContractResolver(),
                       }));
        var postInfoUrl = '@Url.Action(MVC.Product.Home.ActionNames.SaveRatings, MVC.Product.Home.Name, new {area = MVC.Product.Name})';
    </script>
    @Scripts.Render("~/bundles/product-page")

}
